@prefix rr: <http://www.w3.org/ns/r2rml#>.
@prefix ex: <http://example.com/ns#>.
@prefix map: <http://mapping.local/>.
@prefix sty: <http://purl.bioontology.org/ontology/STY/>.
@prefix sio: <http://semanticscience.org/resource/SIO_>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix ncit: <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#>.
@prefix roo: <http://www.cancerdata.org/roo/>.
@prefix icd: <http://purl.bioontology.org/ontology/ICD10/>.
@prefix skos: <http://www.w3.org/2008/05/skos#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix uo: <http://purl.obolibrary.org/obo/uo_>.
@prefix time: <http://www.w3.org/2006/time#>.


map:basicQuery a rr:LogicalTable;
    rr:sqlQuery """SELECT PatientID as id,  ROUND(CAST(Age as decimal),0) as age, Gender as sex, Clinical_T_Stage as clinical_t, Clinical_N_Stage as clinical_n,
SurvivalTime as survival_time,DeadStatus as vital_status, 
(CASE WHEN (CAST(SurvivalTime as decimal)>730) THEN 1 WHEN (CAST(SurvivalTime as decimal)<=730 AND DeadStatus='1') THEN 0 ELSE NULL END) AS survival_2y 
FROM PBDWHackathon2018;""";
    rdfs:label """Every row in this table should correspond to a unique patient.<br/>
The target variables have the following name and specific meaning:
The table should contain a unique patient identifier, age, sex, t-stage, n-stage, survival time in days and vital status at this time.<br/>
<ul>
<li>id: unique identifier of the patient</li>
<li>age:  patient's age at diagnosis</li>
<li>sex:  patient's biological sex</li>
<li>clinical_t: clinical <strong>tumor</strong> stage</li>
<li>clinical_n: clinical <strong>nodal</strong> stage</li>
<li>survival_2y: two year survival </li>
</ul>""";
    skos:definition "id,age,sex,clinical_t,clinical_n,survival_2y".

map:patient a rr:TriplesMap;
    rr:logicalTable map:basicQuery; 
    rr:subjectMap [
        rr:template "patient/";
        rr:class ncit:C16960; #patient
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100061; #has_person_identifier
        rr:objectMap [
            rr:parentTriplesMap map:identifier;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
         ];
    ];
        rr:predicateObjectMap [
        rr:predicate roo:P100024; # has procedure
        rr:objectMap [
            rr:parentTriplesMap map:radiotherapy;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];    
    rr:predicateObjectMap [
        rr:predicate roo:P100024; # has procedure
        rr:objectMap [
            rr:parentTriplesMap map:chemotherapy;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100024;# has procedure 
        rr:objectMap [
            rr:parentTriplesMap map:surgery;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100024;# has procedure 
        rr:objectMap [
            rr:parentTriplesMap map:targetedTherapy;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100024;# has procedure 
        rr:objectMap [
            rr:parentTriplesMap map:immunotherapy;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100024;# has procedure 
        rr:objectMap [
            rr:parentTriplesMap map:hormoneTherapy;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_reported;                                                             # new roo predicate                                                                                           # reports?
        rr:objectMap [
            rr:parentTriplesMap map:patientReportedOutcomeMeasures;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:decides;                                                             # new roo predicate 
        rr:objectMap [
            rr:parentTriplesMap map:treatmentRegimen;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100024; # has procedure                                                             # new roo predicate 
        rr:objectMap [
            rr:parentTriplesMap map:preparationProcedure;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

map:radiotherapy a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/radiotherapy";
            rr:class ncit:C15313; #radiation therapy
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_subtype; #                                                            new roo predicate  
        rr:objectMap [
            rr:parentTriplesMap map:reirradiation;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_purpose;                                                           #new roo predicat
        rr:objectMap [
            rr:parentTriplesMap map:purposeOfRT;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];   
    rr:predicateObjectMap [
        rr:predicate roo:has_treatment_technique; #                                            new roo predicate                                 
        rr:objectMap [
            rr:parentTriplesMap map:IGRT;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:has_treatment_technique; #                                             new roo predicate 
        rr:objectMap [
            rr:parentTriplesMap map:ART;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100082; #has occurence                                        
        rr:objectMap [
            rr:parentTriplesMap map:planAdaptation;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:has_treatment_technique; #                                         new roo predicate 
        rr:objectMap [
            rr:parentTriplesMap map:protonTherapy;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100300 ;  #has RT start date
        rr:objectMap [
            rr:parentTriplesMap map:startDateOfRT; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100299; #has RT end date
        rr:objectMap [
            rr:parentTriplesMap map:endDateOfRT; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property
        rr:objectMap [
            rr:parentTriplesMap map:totalDose; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property
        rr:objectMap [
            rr:parentTriplesMap map:fractionDose;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ]; 
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property
        rr:objectMap [
            rr:parentTriplesMap map:fraction; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property
        rr:objectMap [
            rr:parentTriplesMap map:doseToOAR; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_type;                                                           #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:photonTherapy;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_planning_comparison;                                            #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:planningComparison;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_treatment_position;                                            #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:treatmentPosition;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_treatment_sequence;                                            #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:treatmentSequence;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_type; #                                                            new roo predicate  
        rr:objectMap [
            rr:parentTriplesMap map:radiationType;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100024 ; # has_procedure  
        rr:objectMap [
            rr:parentTriplesMap map:motionManagementTechniques;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100024 ; # has_procedure  
        rr:objectMap [
            rr:parentTriplesMap map:positionVerification;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100024 ; # has_procedure  
        rr:objectMap [
            rr:parentTriplesMap map:preOperativeConsultation;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_bolus ;                                                            # new roo predicate  
        rr:objectMap [
            rr:parentTriplesMap map:bolus;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

map:bolus a rr:TriplesMap;
    rr:logicalTable map:basicQuery; 
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/bolus/{bolus}";
        rr:class ncit:C112914;#radiotherapy bolus
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042 ; #has_value
        rr:objectMap [
            rr:column "bolus"; 
            rr:datatype xsd:boulean;
        ];
    ].

map:preOperativeConsultation a rr:TriplesMap;
    rr:logicalTable map:basicQuery; 
    rr:subjectMap [
            rr:datatype xsd:date;
        rr:template "patient/{id}/radiotherapy/preOperativeConsultation/{dateOfPreOperativeConsultation}";
        rr:class roo:positionVerification;                                                         #new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100228; #has_date 
        rr:objectMap [
            rr:column "dateOfPreOperativeConsultation"; 
            rr:datatype xsd:date;
        ];
    ].

map:positionVerification a rr:TriplesMap;
    rr:logicalTable map:basicQuery; 
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/positionVerification/{positionVerification}";
        rr:class roo:positionVerification;                                                         #new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value; 
        rr:objectMap [
            rr:column "positionVerification"; 
            rr:datatype xsd:string;
        ];
    ].

map:motionManagementTechniques a rr:TriplesMap;
    rr:logicalTable map:basicQuery; 
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/motionManagementTechniques/{motionManagementTechniques}";
        rr:class roo:C100639;#Motion Management Procedure
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value; 
        rr:objectMap [
            rr:column "motionManagementTechniques"; 
            rr:datatype xsd:string;
        ];
    ].

map:treatmentPosition a rr:TriplesMap;
    rr:logicalTable map:basicQuery; 
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/treatmentPosition/{treatmentPosition}";
        rr:class roo:treatmentPosition;                                                         #new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value; 
        rr:objectMap [
            rr:column "treatmentPosition"; 
            rr:datatype xsd:string;
        ];
    ].

map:radiationType a rr:TriplesMap;
    rr:logicalTable map:basicQuery; 
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/radiationType/{radiationType}";
        rr:class ncit:C158319; #Radiological/Nuclear Agent Ionizing Radiation Type
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value; 
        rr:objectMap [
            rr:column "radiationType"; 
            rr:datatype xsd:string;
        ];
    ].

map:treatmentSequence a rr:TriplesMap;
    rr:logicalTable map:basicQuery; 
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/treatmentSequence/{treatmentSequence}";
        rr:class roo:treatmentSequence;                                                         #new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value; 
        rr:objectMap [
            rr:column "treatmentSequence"; 
            rr:datatype xsd:string;
        ];
    ].

map:reirradiation a rr:TriplesMap;
    rr:logicalTable map:basicQuery; 
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/reirradiation/{reirradiationNumber}";
        rr:class roo:reirradiation;                                                         #new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100223; #has_count
        rr:objectMap [
            rr:column "reirradiationNumber"; 
            rr:datatype xsd:integer;
        ];
    ].

map:purposeOfRT a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/prophylacticTargetRT or therapeuticTargetRT"; #how do I make this distinction
        rr:class roo:purposeOfRT;                        
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_type;                                                         #new roo predicate
        rr:objectMap [
            rr:column "?"; 
            rr:datatype xsd:string;
        ];
    ].

map:startDateOfRT a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "prophylacticTargetRT or therapeuticTargetRT"; #how do I make this distinction
        rr:class roo:startDateOfRT; #                                               new roo class 
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "prophylacticTargetRT or therapeuticTargetRT"; #how do I make this distinction 
            rr:datatype xsd:date; 
        ];
    ].
map:endDateOfRT a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "prophylacticTargetRT or therapeuticTargetRT"; #how do I make this distinction 
        rr:class ncit:C156814; #Date of Last Radiation Treatment                                            of nieuwe roo endDateOfRT?
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "prophylacticTargetRT or therapeuticTargetRT"; #how do I make this distinction 
            rr:datatype xsd:date; 
        ];
    ].
map:totalDose a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/radiotherapy/totalDose{totalDose}";
        rr:class ncit:C94394; #cumulative dose                                             
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "totalDose"; 
            rr:datatype xsd:float; 
        ];
    ].
map:fractionDose a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/fractionDose/{fractionDose}";
        rr:class roo:C100353; #radiotherapy fraction dose                                             
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "fractionDose"; 
            rr:datatype xsd:float; 
        ];
    ].

map:fraction a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/numberOfFractions/{numberOfFractions}";
        rr:class ncit:C25514; #fraction                                                          ???? correct ontology
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "numberOfFractions"; 
            rr:datatype xsd:float; 
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100004 ; #has intent
        rr:objectMap [
            rr:parentTriplesMap map:intentOfRT; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

map:doseToOAR a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/doseToOARsTreatmentPlanning/{doseToOARsTreatmentPlanning}";
        rr:class roo:doseToOAR;                                                                      #new roo class
    ];
     rr:predicateObjectMap [
        rr:predicate roo:local_value;  
        rr:objectMap [
            rr:column "doseToOARsTreatmentPlanning"; 
            rr:datatype xsd:float; 
        ];
    ].

map:treatmentRegimen a rr:TriplesMap;
    rr:logicalTable map:basicQuery; 
    rr:subjectMap [
        rr:template "patient/{id}/treatmentRegimen";
        rr:class ncit:C15697; #Treatment Regimen
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100423; #consists_of
        rr:objectMap [
            rr:parentTriplesMap map:radiotherapy;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100423; #consists_of
        rr:objectMap [
            rr:parentTriplesMap map:surgery;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100423; #consists_of
        rr:objectMap [
            rr:parentTriplesMap map:chemotherapy;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100024;
        rr:objectMap [
            rr:parentTriplesMap map:immunotherapy;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100024;
        rr:objectMap [
            rr:parentTriplesMap map:hormoneTherapy;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100402 ; #treats
        rr:objectMap [
            rr:parentTriplesMap map:localRecurrence;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100402 ; #treats
        rr:objectMap [
            rr:parentTriplesMap map:regionalRecurrence;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

map:localRecurrence a rr:TriplesMap;
    rr:logicalTable map:basicQuery; 
    rr:subjectMap [
        rr:template "patient/{id}/treatmentRegimen/localRecurrence/{localRecurrence}";
        rr:class roo:localRecurrence;                                                            #new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "localRecurrence"; 
            rr:datatype xsd:boulean;
        ];
    ].

map:regionalRecurrence a rr:TriplesMap;
    rr:logicalTable map:basicQuery; 
    rr:subjectMap [
        rr:template "patient/{id}/treatmentRegimen/regionalRecurrence/{regionalRecurrence}";
        rr:class roo:regionalRecurrence;                                                            #new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "regionalRecurrence"; 
            rr:datatype xsd:boulean;
        ];
    ].

map:chemotherapy a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/chemotherapy";
        rr:class ncit:C15632; #chemotherapy
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_subtype;                                                               #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:systemicTreatment;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100423; #consists of
        rr:objectMap [
            rr:parentTriplesMap map:chemotherapeuticAgent;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100239; #has_chemo_start_date
        rr:objectMap [
            rr:column "patient/{id}/chemotherapy/startdate/{startdate}";                                 # does this work or new subject?
            rr:datatype xsd:date;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100337; #has_chemo_end_date
        rr:objectMap [
            rr:column "patient/{id}/chemotherapy/enddate/{enddate}"; 
            rr:datatype xsd:date;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100423; #consists of
        rr:objectMap [
            rr:parentTriplesMap map:treatmentCycles;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100423; #consists of
        rr:objectMap [
            rr:parentTriplesMap map:totalDose;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
     ];
    rr:predicateObjectMap [
        rr:predicate roo:P100423; #consists of
        rr:objectMap [
            rr:parentTriplesMap map:doseReduction;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
     ];
     rr:predicateObjectMap [
        rr:predicate roo:P100423; #consists of
        rr:objectMap [
            rr:parentTriplesMap map:includedInTrial;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_treatment_goal;                                                                #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:chemotherapyGoal;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100004 ; #has intent
        rr:objectMap [
            rr:parentTriplesMap map:intentOfRT; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

map:systemicTreatment a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/chemotherapy/systemicTreatment/{systemicTreatment}";
        rr:class roo:systemicTreatment;                                                         #new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "systemicTreatment"; 
            rr:datatype xsd:string;
        ];
    ].

map:chemotherapeuticAgent a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/chemotherapy/chemotherapeuticAgent/{whichdrugs}";
        rr:class roo:chemotherapeuticAgent #medication
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "whichDrugs"; 
            rr:datatype xsd:string;
        ];
    ].

map:treatmentCycles a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/chemotherapy/treatmentCycles/{treatmentCycles}";
        rr:class ncit:C25472; #cycle
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "treatmentCycles"; 
            rr:datatype xsd:integer;
        ];
    ].

map:doseReduction a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/chemotherapy/doseReduction/{doseReduction}";
        rr:class ncit:C49505; #dose reduced 
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "doseReduction"; 
            rr:datatype xsd:boolean; 
        ];
    ].

map:surgery a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/surgery";
        rr:class 	ncit:C157740 ;  #cancer surgery
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has_value
        rr:objectMap [
            rr:column "surgeryPrimaryTumour"; 
            rr:datatype xsd:boolean; 
        ];
    ];
        rr:predicateObjectMap [                                                     
        rr:predicate roo:P100295;  #has_procedure_date                    
        rr:objectMap [
             rr:parentTriplesMap map:procedureDate;
             rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];   
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100402; #treats
        rr:objectMap [
            rr:parentTriplesMap map:neoplasm;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

map:procedureDate a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/surgery/procedureDate/{procedureDate}";
        rr:class ncit:C117538 ;  #Procedure Date Time of Reference Timepoint
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value                           
        rr:objectMap [
            rr:column "procedureDate"; 
            rr:datatype xsd:date; 
        ];
    ].

map:IGRT a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/IGRT/{IGRT}";
        rr:class ncit:C62727; # image guided radiation therapy
    ];
     rr:predicateObjectMap [
        rr:predicate roo:local_value;                                         
        rr:objectMap [
            rr:column "IGRT"; 
            rr:datatype xsd:string; 
        ];
    ].

map:ART a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/ART/{ART}";
        rr:class ncit:C116432; # image guided adaptive radiation therapy                    
    ];
     rr:predicateObjectMap [
        rr:predicate roo:local_value;                                         
        rr:objectMap [
            rr:column "ART"; 
            rr:datatype xsd:string; 
        ];
    ].

map:planAdaptation a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/planAdapted/{planAdapted}";
        rr:class roo:planAdaptation;                                                        #new roo class 
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value                                       
        rr:objectMap [
            rr:column "planAdapted"; 
            rr:datatype xsd:boulean; 
        ];
    ].

map:protonTherapy a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/protonTherapyFactors";
        rr:class ncit:C66897; # proton beam radiation therapy
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property                                        
        rr:objectMap [
            rr:parentTriplesMap map:numberOfScenariosForRobustEvaluation;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property                                         
        rr:objectMap [
            rr:parentTriplesMap map:numberOfBeams;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property                                        
        rr:objectMap [
            rr:parentTriplesMap map:robustTreatmentPlanningRangeUncertainty; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];        
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property                                        
        rr:objectMap [
            rr:parentTriplesMap map:robustnessEvaluationSetup;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property                                         
        rr:objectMap [
            rr:parentTriplesMap map:layerRepainting;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property                                         
        rr:objectMap [
           rr:parentTriplesMap map:optimalFieldPlan;
           rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property                                         
        rr:objectMap [
           rr:parentTriplesMap map:typeOfBeamAbsorber;
           rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property                                         
        rr:objectMap [
           rr:parentTriplesMap map:doseCalculationEngine;
           rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property                                         
        rr:objectMap [
            rr:parentTriplesMap map:MCUncertainty; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];  

        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_reason;                                                        #new roo predicate
            rr:objectMap [
                rr:column "patient/{id}/radiotherapy/protonTherapyFactors/reasonForNoProtonTherapy/{reasonForNoProtonTherapy}";
                rr:datatype xsd:string;
            ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value 
            rr:objectMap [
                rr:column "patient/{id}/radiotherapy/protonTherapyFactors/{modalityProtons}";
                rr:datatype xsd:string;
            ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_created;                                                       #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:registration;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:has_treatment_technique; #has property                                        
        rr:objectMap [
            rr:parentTriplesMap map:protonTherapyTreatmentTechnique;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

map:protonTherapyTreatmentTechnique a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/radiotherapy/protontherapyFactors/protonTherapyTreatmentTechnique/{protonTherapyTreatmentTechnique}";
            rr:class ncit:C104914;
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value;
        rr:objectMap [
            rr:column "protonTherapyTreatmentTechnique"; 
            rr:datatype xsd:string;
        ];
    ].

map:photonTherapy a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/radiotherapy/photonTherapy/{modalityPhotons}";
            rr:class ncit:C104914;
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value;
        rr:objectMap [
            rr:column "modalityPhotons"; 
            rr:datatype xsd:string;
        ];
    ].
	
map:numberOfScenariosForRobustEvaluation a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/protonTherapyFactors/numberOfScenariosForRobustEvaluation/{numberOfScenariosForRobustEvaluation}";
        rr:class  	roo:numberOfScenariosForRobustEvaluation;                                   #new roo class               
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value                                       
        rr:objectMap [
            rr:column "numberOfScenariosForRobustEvaluation"; 
            rr:datatype xsd:integer; 
        ];
    ].

map:numberOfBeams a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/protonTherapyFactors/numberOfBeams/{numberOfBeams}";
        rr:class  roo:numberOfBeams;                                                            #new roo class
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value                                       
        rr:objectMap [
            rr:column "numberOfBeams"; 
            rr:datatype xsd:integer; 
        ];
    ].

map:robustTreatmentPlanningRangeUncertainty a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/protonTherapyFactors/robustTreatmentPlanningRangeUncertainty/{robustTreatmentPlanningRangeUncertainty}";
        rr:class  	roo:robustTreatmentPlanningRangeUncertainty;                                                  #new roo class
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value                                       
        rr:objectMap [
            rr:column "robustTreatmentPlanningRangeUncertainty"; 
            rr:datatype xsd:integer; 
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has unit
        rr:objectMap [
            rr:parentTriplesMap map:percentage;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];       
    ].

map:robustnessEvaluationSetup a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/protonTherapyFactors/robustnessEvaluationSetup/{robustnessEvaluationSetup}";
        rr:class  	roo:robustnessEvaluationSetup ;                                                         #new roo class
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value                                       
        rr:objectMap [
            rr:column "robustnessEvaluationSetup"; 
            rr:datatype xsd:integer; 
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has unit
        rr:objectMap [
            rr:parentTriplesMap map:millimeter;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];       
    ].

map:layerRepainting a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/protonTherapyFactors/layerRepainting/{layerRepainting}";
        rr:class  	roo:layerRepainting ;                                                   #new roo class
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value                                       
        rr:objectMap [
            rr:column "layerRepainting"; 
            rr:datatype xsd:integer;                                                               #???? float of integer
        ];
    ].

map:optimalFieldPlan a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/protonTherapyFactors/optimalFieldPlan/{optimalFieldPlan}";
        rr:class  	roo:optimalFieldPlan ;  #                                                    new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value;
        rr:objectMap [
            rr:column "optimalFieldPlan"; 
            rr:datatype xsd:string; 
        ];       
    ].

map:typeOfBeamAbsorber a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/protonTherapyFactors/typeOfBeamAbsorber/{typeOfBeamAbsorber}";
        rr:class  	ncit:C50372;  #absorber device                                                    ????correct ontology
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value;
        rr:objectMap [
            rr:column "typeOfBeamAbsorber"; 
            rr:datatype xsd:string; 
        ];       
    ].

map:doseCalculationEngine a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/protonTherapyFactors/doseCalculationEngine/{doseCalculationEngine}";
        rr:class roo:doseCalculationEngine;                                                     # new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value;
        rr:objectMap [
            rr:column "doseCalculationEngine"; 
            rr:datatype xsd:string; 
        ];       
    ].

map:MCUncertainty a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/protonTherapyFactors/MCUncertainty/{MCUncertainty}";
        rr:class  	roo:MCUncertainty;                                                          #new roo class
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value                                       
        rr:objectMap [
            rr:column "MCUncertainty"; 
            rr:datatype xsd:integer; 
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has unit
        rr:objectMap [
            rr:parentTriplesMap map:percentage;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];       
    ].

map:percentage a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/protonTherapyFactors/percentage";
        rr:class uo:0000187; #percent                                                     
    ].

map:preparationProcedure a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure";
        rr:class roo:preparationProcedure;  #                                                            new roo class                                                           
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100024;  #has procedure
        rr:objectMap [
            rr:parentTriplesMap map:dualEnergyPlanningCTScan;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ]; 
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100024;  #has procedure
        rr:objectMap [
            rr:parentTriplesMap map:planningPETCT; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100024;  #has procedure
        rr:objectMap [
            rr:parentTriplesMap map:planningMRI; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property
        rr:objectMap [
            rr:parentTriplesMap map:targetVolume; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property
        rr:objectMap [
            rr:parentTriplesMap map:gTV; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property
        rr:objectMap [
            rr:parentTriplesMap map:pTV; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property
        rr:objectMap [
            rr:parentTriplesMap map:cTV1; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property
        rr:objectMap [
            rr:parentTriplesMap map:cTV2; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100024;  #has procedure
        rr:objectMap [
            rr:parentTriplesMap map:boostTechnique; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100024; #has procedure
        rr:objectMap [
            rr:parentTriplesMap map:ultrasound;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100024; #has procedure
        rr:objectMap [
            rr:parentTriplesMap map:sentinelNodeBiopsy;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100024; #has procedure
        rr:objectMap [
            rr:parentTriplesMap map:boneScintigraphy;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100024; #has procedure
        rr:objectMap [
            rr:parentTriplesMap map:cTScan;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:precedes;                                                                      #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:surgery;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:precedes;                                                                      #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:radiotherapy;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:precedes;                                                                      #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:chemotherapy;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100024;  #has procedure
        rr:objectMap [
            rr:parentTriplesMap map:bloodPressureFinding;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ]; 
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100024;  #has procedure
        rr:objectMap [
            rr:parentTriplesMap map:laboratoryTest;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ]; 
        ];
    ]. 

map:ultrasound a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/preparationProcedure/ultrasound/{ultrasoundResults}";
            rr:class ncit:C17230; #or ncit:C64384
    ];
    rr:predicateObjectMap [
            rr:predicate roo:local_value;
            rr:objectMap [
                rr:column "ultrasoundResults";
                rr:datatype xsd:string;
            ];
    ].

map:sentinelNodeBiopsy a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/preparationProcedure/sentinelNodeProcedure/{sentinelNodeProcedure}";
            rr:class ncit:C15667; #sentinel node biopsy
    ];        
    rr:predicateObjectMap [
            rr:predicate roo:has_value;
            rr:objectMap [
                rr:column "sentinelNodeProcedure";
                rr:datatype xsd:boulean;
            ];
    ].

map:boneScintigraphy a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/preparationProcedure/boneScintigraphy/{boneScintigraphy}";
            rr:class ncit:C17646; #bone scan
    ];
    rr:predicateObjectMap [
            rr:predicate roo:local_value;
            rr:objectMap [
                rr:column "boneScintigraphy";
                rr:datatype xsd:string;
            ];
    ].

map:cTScan a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/preparationProcedure/cTScan/{cTScan}";
            rr:class ncit:C17204; #computed tomography
    ];
    rr:predicateObjectMap [
            rr:predicate roo:local_value;
            rr:objectMap [
                rr:column "cTScan";
                rr:datatype xsd:string;
            ];
    ].

map:dualEnergyPlanningCTScan a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/dualEnergyPlanningCTScan";
        rr:class ncit:C121378; #Dual-Energy Computed Tomography
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "dualEnergyPlanningCTScan"; 
            rr:datatype xsd:boolean; 
        ];
    ].

map:planningPETCT a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/planningPETCT";
        rr:class ncit:petct; #Positron Emission Tomography and Computed Tomography Scan
    ];
     rr:predicateObjectMap [
        rr:predicate roo:local_value;  #has value
        rr:objectMap [
            rr:column "planningPETCT"; 
            rr:datatype xsd:string; 
        ];
    ].

map:planningMRI a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/planningMRI";
        rr:class ncit:C16809; #Magnetic Resonance Imaging
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "planningMRI"; 
            rr:datatype xsd:boolean; 
        ];
    ];
    rr:predicateObjectMap [                                                     
        rr:predicate roo:P100295;  #has_procedure_date                    
        rr:objectMap [
             rr:parentTriplesMap map:procedureDate;
             rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];   
        ];
    ].

map:targetVolume a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/targetVolume";
        rr:class roo:targetVolume;                                                                      # new roo classification
    ];
     rr:predicateObjectMap [
        rr:predicate roo:local_value;
        rr:objectMap [
            rr:column "targetVolume"; 
            rr:datatype xsd:string; 
        ];
    ].

map:gTV a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/gTV";
        rr:class ncit:C112913; #gross target volume
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100027;  #has unit
        rr:objectMap [
            rr:parentTriplesMap map:CC; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "patient/{id}/preparationProcedure/gTVVolume"; 
            rr:datatype xsd:integer; 
        ];
    ].

map:pTV a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/pTV";
        rr:class ncit:C82606; #Planning Target Volume                                                     
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100004 ; #has intent
        rr:objectMap [
            rr:parentTriplesMap map:intentOfRT; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property
        rr:objectMap [
            rr:parentTriplesMap map:meanDoseOfPTV; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property
        rr:objectMap [
            rr:parentTriplesMap map:v95OfPTV; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property
        rr:objectMap [
            rr:parentTriplesMap map:d98OfPTV; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property
        rr:objectMap [
            rr:parentTriplesMap map:d2OfPTV; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property
        rr:objectMap [
            rr:parentTriplesMap map:v95OfPatient; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100212; #has property
        rr:objectMap [
            rr:parentTriplesMap map:D50OfPTV; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

map:intentOfRT a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/pTV/intentOfRT{intentOfRT}";
        rr:class roo:intentOfRT;                                                                        #new roo class                                                     
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "elective of boost";                                                             #how to make the distinction
            rr:datatype xsd:string; 
            
        ];
    ].

map:meanDoseOfPTV a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/pTV/meanDoseOfPTV{meanDoseOfPTV}";
        rr:class ncit:C112912; #clinical target volume                                                     
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100027;  #has unit
        rr:objectMap [
            rr:parentTriplesMap map:gY;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ]; 
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "meanDoseOfPTV"; 
            rr:datatype xsd:float; 
            
        ];
    ].

map:gY a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/pTV/meanDoseOfPTV/gY";
        rr:class ncit:C18063; #Gray
    ].

map:v95OfPTV a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/pTV/v95OfPTV{v95OfPTV}";
        rr:class roo:v95OfPTV;                                                                          #new roo class                                                   
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100027;  #has unit
        rr:objectMap [
            rr:parentTriplesMap map:percentage;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ]; 
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "v95OfPTV"; 
            rr:datatype xsd:integer; 
            
        ];
    ].

map:d98OfPTV a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/pTV/d98OfPTV{d98OfPTV}";
        rr:class roo:d98OfPTV;                                                                          #new roo class                                                   
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100027;  #has unit
        rr:objectMap [
            rr:parentTriplesMap map:percentage;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ]; 
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "d98OfPTV"; 
            rr:datatype xsd:integer; 
            
        ];
    ].

map:d2OfPTV a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/pTV/d2OfPTV{d2OfPTV}";
        rr:class roo:d2OfPTV;                                                                          #new roo class                                                   
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100027;  #has unit
        rr:objectMap [
            rr:parentTriplesMap map:percentage;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ]; 
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "d2OfPTV"; 
            rr:datatype xsd:integer; 
            
        ];
    ].

map:cTV1 a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/cTV1{cTV1}";
        rr:class ncit:C112912; #clinical target volume                                                     
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100027;  #has unit
        rr:objectMap [
            rr:parentTriplesMap map:CC;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ]; 
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "cTV1"; 
            rr:datatype xsd:integer; 
            
        ];
    ].

map:CTV2 a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/CTV2/{CTV2}";
        rr:class ncit:C112912; #clinical target volume                                                      same ontology as ctv1?                                        
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100027;  #has unit
        rr:objectMap [
            rr:parentTriplesMap map:CC;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ]; 
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "CTV2"; 
            rr:datatype xsd:integer; 
            
        ];
    ].

map:boostTechnique a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/boostTechnique";
        rr:class ncit:C137908; #boost radiation therapy                                     ? boost technique = boost radiation therapy                                                     
    ];
     rr:predicateObjectMap [
        rr:predicate roo:local_value;
        rr:objectMap [
            rr:column "boostTechnique"; 
            rr:datatype xsd:string; 
        ];
    ].

map:CC a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/GTVVolume/CC";
        rr:class uo:0000097; #cubic centimeter                                                     
    ].

map:patientReportedOutcomeMeasures a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/patientReportedOutcomeMeasures";
        rr:class roo:patientReportedOutcomeMeasures;                              #new roo class                                                        
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100423  ;  #consistsOf
        rr:objectMap [
            rr:parentTriplesMap map:EORTCQLQ_HAndN35; #no "&" possible  
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];                                                                                                            
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100423  ;  #consistsOf
        rr:objectMap [
            rr:parentTriplesMap map:EORTCQLQ_C30; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];                                                        
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100423  ;  #consistsOf
        rr:objectMap [
            rr:parentTriplesMap map:EUROQOL_5D;   
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];                                                      
        ];
    ].

map:EORTCQLQ_HAndN35 a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/patientReportedOutcomeMeasures/EORTCQLQ_HAndN35";
        rr:class ncit:C17048; #questionnaire 
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "EORTCQLQ_HAndN35"; 
            rr:datatype xsd:integer;                                                                    #??? list?
        ];
    ].

map:EORTCQLQ_C30 a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/patientReportedOutcomeMeasures/EORTCQLQ_C30";
        rr:class ncit:C17048; #questionnaire 
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "EORTCQLQ_C30"; 
            rr:datatype xsd:integer;                                                                    #??? list?
        ];
    ].

map:EUROQOL_5D a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/patientReportedOutcomeMeasures/EUROQOL_5D";
        rr:class ncit:C17048; #questionnaire 
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has value
        rr:objectMap [
            rr:column "EUROQOL_5D"; 
            rr:datatype xsd:integer;                                                                    #??? list?
        ];
    ].

map:immunotherapy a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/immunotherapy";
            rr:class ncit:C15262;
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_treatment_goal;                                                                #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:immunotherapyGoal;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];    
    rr:predicateObjectMap [
        rr:predicate roo:P100402; #treats
        rr:objectMap [
            rr:parentTriplesMap map:neoplasm;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

map:targetedTherapy a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/targetedTherapy";
            rr:class ncit:C93352; #targeted therapy
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_treatment_goal;                                                                #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:targetedTherapyGoal;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];    
    rr:predicateObjectMap [
        rr:predicate roo:P100402; #treats
        rr:objectMap [
            rr:parentTriplesMap map:neoplasm;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];   
     rr:predicateObjectMap [
        rr:predicate roo:has_targeted_therapy_start_date ;                                                   #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:startDateOfTargetedTherapy; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];   
     rr:predicateObjectMap [
        rr:predicate roo:has_targeted_therapy_end_date ;                                                   #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:endDateOfTargetedTherapy; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].
    
map:hormoneTherapy a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/hormoneTherapy";
            rr:class ncit:C15445; #hormone therapy
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_treatment_goal;                                                                #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:hormoneTherapyGoal;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];    
    rr:predicateObjectMap [
        rr:predicate roo:P100402; #treats
        rr:objectMap [
            rr:parentTriplesMap map:neoplasm;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_hormone_therapy_status;                                                                #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:hormoneTherapyStatus;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];   
     rr:predicateObjectMap [
        rr:predicate roo:has_hormone_therapy_start_date ;  #has RT start date
        rr:objectMap [
            rr:parentTriplesMap map:startDateOfHormoneTherapy; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate roo:has_hormone_therapy_duration; #has RT end date
        rr:objectMap [
            rr:parentTriplesMap map:plannedDurationOfHormoneTherapy; 
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

map:chemotherapyGoal a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/chemotherapy/chemotherapyGoal/{chemotherapyGoal}";
            rr:class roo:chemotherapyGoal;                                                        # new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value; 
        rr:objectMap [
            rr:column "chemotherapyGoal"; 
            rr:datatype xsd:string;
        ];
    ].

map:targetedTherapyGoal a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/targetedTherapy/targetedTherapyGoal/{targetedTherapyGoal}";
            rr:class roo:targetedTherapyGoal;                                                        # new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value; 
        rr:objectMap [
            rr:column "targetedTherapyGoal"; 
            rr:datatype xsd:string;
        ];
    ].

map:startDateOfTargetedTherapy a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/targetedTherapy/startDateOfTargetedTherapy/{startDateOfTargetedTherapy}";
            rr:class roo:startDateOfTargetedTherapy;                                                        # new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value; 
        rr:objectMap [
            rr:column "startDateOfTargetedTherapy"; 
            rr:datatype xsd:string;
        ];
    ].

map:endDateOfTargetedTherapy a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/targetedTherapy/endDateOfTargetedTherapy/{endDateOfTargetedTherapy}";
            rr:class roo:endDateOfTargetedTherapy;                                                        # new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value; 
        rr:objectMap [
            rr:column "endDateOfTargetedTherapy"; 
            rr:datatype xsd:string;
        ];
    ].


map:immunotherapyGoal a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/immunoTherapy/immunotherapyGoal/{immunotherapyGoal}";
            rr:class roo:immunotherapyGoal;                                                        # new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value; 
        rr:objectMap [
            rr:column "immunotherapyGoal"; 
            rr:datatype xsd:string;
        ];
    ].

map:hormoneTherapyGoal a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/chemotherapy/hormoneTherapyGoal/{hormoneTherapyGoal}";
            rr:class roo:hormoneTherapyGoal;                                                        # new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value; 
        rr:objectMap [
            rr:column "hormoneTherapyGoal"; 
            rr:datatype xsd:string;
        ];
    ].

map:hormoneTherapyStatus a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/chemotherapy/hormoneTherapyStatus/{hormoneTherapyStatus}";
            rr:class roo:hormoneTherapyStatus;                                                        # new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value; 
        rr:objectMap [
            rr:column "hormoneTherapyStatus"; 
            rr:datatype xsd:string;
        ];
    ].

map:startDateOfHormoneTherapy a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/chemotherapy/startDateOfHormoneTherapy/{startDateOfHormoneTherapy}";
            rr:class roo:startDateOfHormoneTherapy;                                                                # new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_HT_start_date;                                                            # new roo class
        rr:objectMap [
            rr:column "startDateOfHormoneTherapy"; 
            rr:datatype xsd:date;
        ];
    ].

map:plannedDurationOfHormoneTherapy a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/chemotherapy/plannedDurationOfHormoneTherapy/{plannedDurationOfHormoneTherapy}";
            rr:class roo:plannedDurationOfHormoneTherapy;                                                                # new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100261;# has_duration
        rr:objectMap [
            rr:column "plannedDurationOfHormoneTherapy"; 
            rr:datatype xsd:date;
        ];
    ].

map:planningComparison a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/radiotherapy/planningComparison/PlanningComparisonYesNo/{PlanningComparisonYesNo}";
            rr:class roo:planningComparison;                                                        # new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "PlanningComparisonYesNo"; 
            rr:datatype xsd:boolean;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:parentTriplesMap map:planningComparisonOutcome;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ]; 
        rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:parentTriplesMap map:reasonNegativeProtonTherapyWithPositivePlanningComparison;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100228; #has_date
        rr:objectMap [
            rr:parentTriplesMap map:PlanningComparisonDate;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100267; #has_date
        rr:objectMap [
            rr:parentTriplesMap map:PlanningComparisonVersion;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ]; 
    rr:predicateObjectMap [
        rr:predicate roo:P100397; #has_result
        rr:objectMap [
            rr:parentTriplesMap map:protonTherapy;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100397; #has_result
        rr:objectMap [
            rr:parentTriplesMap map:photonTherapy;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

map:planningComparisonOutcome a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/radiotherapy/planningComparison/PlanningComparisonYesNo/planningComparisonOutcome/{planningComparisonOutcome}";
            rr:class roo:planningComparisonOutcome;
    ];
     rr:predicateObjectMap [
        rr:predicate roo:local_value;
        rr:objectMap [
            rr:column "planningComparisonOutcome"; 
            rr:datatype xsd:string;                                                      
        ];
    ].

map:PlanningComparisonDate a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/radiotherapy/planningComparison/PlanningComparisonDate/{PlanningComparisonDate}";
            rr:class roo:PlanningComparisonDate;
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "PlanningComparisonDate"; 
            rr:datatype xsd:date;
        ];
    ]. 

map:PlanningComparisonVersion a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/radiotherapy/planningComparison/PlanningComparisonVersion/{PlanningComparisonVersion}";
            rr:class roo:PlanningComparisonVersion;
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "PlanningComparisonVersion"; 
            rr:datatype xsd:float;
        ];
    ].

map:reasonNegativeProtonTherapyWithPositivePlanningComparison a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "patient/{id}/vradiotherapy/planningComparison/PlanningComparisonYesNo/reasonNegativeProtonTherapyWithPositivePlanningComparison/{reasonNegativeProtonTherapyWithPositivePlanningComparison}";
            rr:class roo:reasonNegativeProtonTherapyWithPositivePlanningComparison;
    ];
     rr:predicateObjectMap [
        rr:predicate roo:local_value; 
        rr:objectMap [
            rr:column "reasonNegativeProtonTherapyWithPositivePlanningComparison"; 
            rr:datatype xsd:string;     #!!multiple answers possible?
        ];
    ].

map:millimetre a rr:TriplesMap;
    rr:logicalTable map:basicQuery;    
    rr:subjectMap [
            rr:template "millimetre";
            rr:class uo:0000016;
        ].  
    

map:bloodPressureFinding a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/bloodPressureFinding";
        rr:class roo:ncit:C54707; #blood pressure finding?     
    ];
    rr:predicateObjectMap [                                                     
        rr:predicate roo:P100423;  #consists_of                   
        rr:objectMap [
             rr:parentTriplesMap map:systolicBloodPressure;
             rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];   
        ];
    ];
    rr:predicateObjectMap [                                                     
        rr:predicate roo:P100423;  #consists_of                   
        rr:objectMap [
             rr:parentTriplesMap map:diastolicBloodPressure;
             rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];   
        ];
    ].

map:systolicBloodPressure  a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/bloodPressureFinding/systolicBloodPressure/{systolicBloodPressure}";
        rr:class ncit:C25298; #systolic blood pressure
    ];
     rr:predicateObjectMap [
        rr:predicate roo:local_value; 
        rr:objectMap [
            rr:column "systolicBloodPressure"; 
            rr:datatype xsd:integer; 
        ];
    ].

map:diastolicBloodPressure  a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/bloodPressureFinding/diastolicBloodPressure/{diastolicBloodPressure}";
        rr:class ncit:C25299; #diastolic Blood Pressure
    ];
     rr:predicateObjectMap [
        rr:predicate roo:local_value; 
        rr:objectMap [
            rr:column "diastolicBloodPressure"; 
            rr:datatype xsd:integer; 
        ];
    ].


map:laboratoryTest a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/laboratoryTest";
        rr:class roo:ncit:C54707; #blood pressure finding?     
    ];
    rr:predicateObjectMap [                                                     
        rr:predicate roo:has_HbA1c_test;                                                            #new roo class                   
        rr:objectMap [
             rr:parentTriplesMap map:HbA1cTest;
             rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];   
        ];
    ];
    rr:predicateObjectMap [                                                     
        rr:predicate roo:has_Hb_test;                                                            #new roo class                     
        rr:objectMap [
             rr:parentTriplesMap map:HbTest;
             rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];   
        ];
    ];
    rr:predicateObjectMap [                                                     
        rr:predicate roo:has_Ht_test;                                                            #new roo class                     
        rr:objectMap [
             rr:parentTriplesMap map:HtTest;
             rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];   
        ];
    ];
    rr:predicateObjectMap [                                                     
        rr:predicate roo:has_LDL_Cholesterol_test;                                                            #new roo class                     
        rr:objectMap [
             rr:parentTriplesMap map:LDLCholesterolTest;
             rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];   
        ];
    ];
    rr:predicateObjectMap [                                                     
        rr:predicate roo:has_Total_Cholesterol_test;                                                            #new roo class                     
        rr:objectMap [
             rr:parentTriplesMap map:TotalCholesterolTest;
             rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];   
        ];
    ];
    rr:predicateObjectMap [                                                     
        rr:predicate roo:has_Triglyceride_test;                                                            #new roo class                     
        rr:objectMap [
             rr:parentTriplesMap map:TriglycerideTest;
             rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];   
        ];
    ];
    rr:predicateObjectMap [                                                     
        rr:predicate roo:has_Urea_test;                                                            #new roo class                     
        rr:objectMap [
             rr:parentTriplesMap map:UreaTest;
             rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];   
        ];
    ];
    rr:predicateObjectMap [                                                     
        rr:predicate roo:has_Creatinine_test;                                                            #new roo class                     
        rr:objectMap [
             rr:parentTriplesMap map:CreatinineTest;
             rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];   
        ];
    ];
    rr:predicateObjectMap [                                                     
        rr:predicate roo:has_eGFR_test;                                                            #new roo class                     
        rr:objectMap [
             rr:parentTriplesMap map:eGFRTest;
             rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];   
        ];
    ];
    rr:predicateObjectMap [                                                     
        rr:predicahas_HSCRP_testte roo:;                                                            #new roo class                     
        rr:objectMap [
             rr:parentTriplesMap map:HSCRPTest;
             rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];   
        ];
    ];
    rr:predicateObjectMap [                                                     
        rr:predicate roo:has_TSH_test;                                                            #new roo class                     
        rr:objectMap [
             rr:parentTriplesMap map:TSHTest;
             rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];   
        ];
    ];
    rr:predicateObjectMap [                                                     
        rr:predicate roo:has_fT4_test;                                                            #new roo class                     
        rr:objectMap [
             rr:parentTriplesMap map:fT4Test;
             rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];   
        ];
    ].


map:HbA1cTest  a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/laboratoryTest/HbA1cTest/{HbA1cTest}";
        rr:class ncit:C25299; #diastolic Blood Pressure
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100397; #has_result 
        rr:objectMap [
            rr:column "HbA1cTest"; 
            rr:datatype xsd:float; 
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has unit
        rr:objectMap [
            rr:parentTriplesMap map:percentage;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];       
    ].

map:HbTest  a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/laboratoryTest/HbTest/{HbTest}";
        rr:class ncit:C64848; #hemoglobin measurement
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100397; #has_result 
        rr:objectMap [
            rr:column "HbTest"; 
            rr:datatype xsd:float; 
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has unit
        rr:objectMap [
            rr:parentTriplesMap map:mmolPerLitre;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];       
    ].

map:mmolPerLitre  a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/laboratoryTest/HbA1cTest/mmolPerLitre";
        rr:class ncit:C64387; #millimole per litre
    ].

map:HtTest  a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/laboratoryTest/HtTest/{HtTest}";
        rr:class ncit:C64796; #hematocrit measurement
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100397; #has_result 
        rr:objectMap [
            rr:column "HtTest"; 
            rr:datatype xsd:float; 
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has unit
        rr:objectMap [
            rr:parentTriplesMap map:percentage;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];       
    ].

map:LDLCholesterolTest  a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/laboratoryTest/LDLCholesterolTest/{LDLCholesterolTest}";
        rr:class ncit:C105588; #Low Density Lipoprotein Cholesterol Measurement
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100397; #has_result 
        rr:objectMap [
            rr:column "LDLCholesterolTest"; 
            rr:datatype xsd:float; 
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has unit
        rr:objectMap [
            rr:parentTriplesMap map:mmolPerLitre;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];       
    ].

map:TotalCholesterolTest  a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/laboratoryTest/TotalCholesterolTest/{TotalCholesterolTest}";
        rr:class ncit:C105586; #Cholesterol Measurement (total)
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100397; #has_result 
        rr:objectMap [
            rr:column "TotalCholesterolTest"; 
            rr:datatype xsd:float; 
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has unit
        rr:objectMap [
            rr:parentTriplesMap map:mmolPerLitre;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];       
    ].

map:TriglycerideTest  a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/laboratoryTest/TriglycerideTest/{TriglycerideTest}";
        rr:class ncit:C64812; #triglyceride measurement
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100397; #has_result 
        rr:objectMap [
            rr:column "TriglycerideTest"; 
            rr:datatype xsd:float; 
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has unit
        rr:objectMap [
            rr:parentTriplesMap map:mmolPerLitre;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];       
    ].

map:UreaTest  a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/laboratoryTest/UreaTest/{UreaTest}";
        rr:class ncit:C64815; #urea measurement
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100397; #has_result 
        rr:objectMap [
            rr:column "UreaTest"; 
            rr:datatype xsd:float; 
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has unit
        rr:objectMap [
            rr:parentTriplesMap map:mmolPerLitre;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];       
    ].

map:CreatinineTest  a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/laboratoryTest/CreatinineTest/{CreatinineTest}";
        rr:class ncit:C64547; #creatinine measurement
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100397; #has_result 
        rr:objectMap [
            rr:column "CreatinineTest"; 
            rr:datatype xsd:float; 
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has unit
        rr:objectMap [
            rr:parentTriplesMap map:umolPerLitre;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];       
    ].

map:umolPerLitre  a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/laboratoryTest/CreatinineTest/umolPerLitre";
        rr:class ncit:C64387; #micromole per litre
    ].

map:eGFRTest  a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/laboratoryTest/eGFRTest/{eGFRTest}";
        rr:class ncit:C110935; #estimated glomerular filtration rate
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100397; #has_result 
        rr:objectMap [
            rr:column "eGFRTest"; 
            rr:datatype xsd:float; 
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has unit
        rr:objectMap [
            rr:parentTriplesMap map:mLPerMin;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];       
    ].

map:mLPerMin  a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/laboratoryTest/eGFRTest/mLPerMin/{mLPerMin}";
        rr:class ncit:C64777; #Milliliter per minute
    ].

map:HSCRPTest  a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/laboratoryTest/HSCRPTest/{HSCRPTest}";
        rr:class ncit:C110935; #estimated glomerular filtration rate
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100397; #has_result 
        rr:objectMap [
            rr:column "HSCRPTest"; 
            rr:datatype xsd:float; 
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has unit
        rr:objectMap [
            rr:parentTriplesMap map:mLPerMin;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];       
    ].

map:mLPerMin  a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/laboratoryTest/eGFRTest/mLPerMin/{mLPerMin}";
        rr:class ncit:C64813; #Milliliter per minute
    ].

map:TSHTest  a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/laboratoryTest/TSHTest/{TSHTest}";
        rr:class ncit:C110935; #Thyrotropin Measurement
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100397; #has_result 
        rr:objectMap [
            rr:column "HSCRPTest"; 
            rr:datatype xsd:float; 
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has unit
        rr:objectMap [
            rr:parentTriplesMap map:mUPerML;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];       
    ].

map:mUPerML  a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/laboratoryTest/eGFRTest/mUPerML/";
        rr:class ncit:C67408; # Microunit per Milliliter
    ].

map:fT4Test  a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/laboratoryTest/fT4Test/{fT4Test}";
        rr:class ncit:C74786; #Free Thyroxine Measurement
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100397; #has_result 
        rr:objectMap [
            rr:column "fT4Test"; 
            rr:datatype xsd:float; 
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has unit
        rr:objectMap [
            rr:parentTriplesMap map:pMolPerL;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];       
    ].

map:pMolPerL  a rr:TriplesMap;
    rr:logicalTable map:basicQuery;
    rr:subjectMap [
        rr:template "patient/{id}/preparationProcedure/laboratoryTest/eGFRTest/pMolPerL/";
        rr:class ncit:C67434; #Picomole per Liter
    ].
